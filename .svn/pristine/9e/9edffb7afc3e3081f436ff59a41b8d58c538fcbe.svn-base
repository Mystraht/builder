<?php
include_once('ApplicationController.class.php');

class ResourcesController extends ApplicationController
{
    public function __construct()
    {
        
    }

    public function index($params)
    {
		$userId = $this->getUserIdByToken(addslashes($params['token']));
		
		if (!$userId) return Utils::formatErrorMessage("Bad token");		
		
		$data = [];
        $error = '';
        $sql = "SELECT r_t.name, r_u.count 
				FROM resource_users AS r_u 
				INNER JOIN resource_type AS r_t
				ON r_t.id = r_u.resource_type_id
				WHERE r_u.user_id =" . $userId;
				
				
        $result = $GLOBALS['app']['db']->fetchAll($sql);
		
		if (count($result) <= 0) $error = "Imposible de récupérer les ressources pour le userId : " . $userId;
		else {
			for ($i = 0; $i < count($result); $i++) {
				$data[$result[$i]['name']] = $result[$i]['count'];
			}
		}
		
		return json_encode([
            'data' => $data,
            'error' => $error != '',
            'errorMessage' => $error
        ]);
    }
	
	public function getResource($params, $resourceName)
	{
		$userId = $this->getUserIdByToken(addslashes($params['token']));
		
		if (!$userId) return Utils::formatErrorMessage("Bad token");		
		
		$data = '';
        $error = '';
        $sql = "SELECT r_t.name, r_u.count 
				FROM resource_users AS r_u 
				INNER JOIN resource_type AS r_t
				ON r_t.id = r_u.resource_type_id
				WHERE r_u.user_id = " . $userId . "
					AND r_t.name = '" . $resourceName . "'";
				
				
        $result = $GLOBALS['app']['db']->fetchAll($sql);
		
		if (count($result) <= 0) $error = "Imposible de récupérer la ressource " . $resourceName . " pour le userId : " . $userId;
		else {
			for ($i = 0; $i < count($result); $i++) {
				$data = $result[0]['count'];
			}
		}
		
		return json_encode([
            'data' => $data,
            'error' => $error != '',
            'errorMessage' => $error
        ]);
	}

/*    public function offering($params)
    {
        $userId = $this->getUserIdByToken(addslashes($params['token']));
		
		if (!$userId) return Utils::formatErrorMessage("Bad token");		
		
		$data = '';
        $error = '';
        $sql = "SELECT r_t.name, r_u.count 
				FROM resource_users AS r_u 
				INNER JOIN resource_type AS r_t
				ON r_t.id = r_u.resource_type_id
				WHERE r_u.user_id = " . $userId . "
					AND r_t.name = 'offering'";
				
				
        $result = $GLOBALS['app']['db']->fetchAll($sql);
		
		if (count($result) <= 0) $error = "Imposible de récupérer les ressources pour le userId : " . $userId;
		else {
			for ($i = 0; $i < count($result); $i++) {
				$data = $result[0]['count'];
			}
		}
		
		return json_encode([
            'data' => $data,
            'error' => $error != '',
            'errorMessage' => $error
        ]);
    }

    public function spice($params)
    {
		$userId = $this->getUserIdByToken(addslashes($params['token']));
		
		if (!$userId) return Utils::formatErrorMessage("Bad token");		
		
		$data = '';
        $error = '';
        $sql = "SELECT r_t.name, r_u.count 
				FROM resource_users AS r_u 
				INNER JOIN resource_type AS r_t
				ON r_t.id = r_u.resource_type_id
				WHERE r_u.user_id = " . $userId . "
					AND r_t.name = 'spice'";
				
				
        $result = $GLOBALS['app']['db']->fetchAll($sql);
		
		if (count($result) <= 0) $error = "Imposible de récupérer les ressources pour le userId : " . $userId;
		else {
			for ($i = 0; $i < count($result); $i++) {
				$data = $result[0]['count'];
			}
		}
		
		return json_encode([
            'data' => $data,
            'error' => $error != '',
            'errorMessage' => $error
        ]);
    }
	
	public function gold($params)
    {
        $userId = $this->getUserIdByToken(addslashes($params['token']));
		
		if (!$userId) return Utils::formatErrorMessage("Bad token");		
		
		$data = '';
        $error = '';
        $sql = "SELECT r_t.name, r_u.count 
				FROM resource_users AS r_u 
				INNER JOIN resource_type AS r_t
				ON r_t.id = r_u.resource_type_id
				WHERE r_u.user_id = " . $userId . "
					AND r_t.name = 'gold'";
				
				
        $result = $GLOBALS['app']['db']->fetchAll($sql);
		
		if (count($result) <= 0) $error = "Imposible de récupérer les ressources pour le userId : " . $userId;
		else {
			for ($i = 0; $i < count($result); $i++) {
				$data = $result[0]['count'];
			}
		}
		
		return json_encode([
            'data' => $data,
            'error' => $error != '',
            'errorMessage' => $error
        ]);
    }*/
}

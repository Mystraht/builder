package com.isartdigital.builder.game;

import com.isartdigital.builder.game.manager.ClippingManager;
import com.isartdigital.builder.game.manager.MapManager;
import com.isartdigital.builder.game.sprites.Building;
import com.isartdigital.builder.game.sprites.Citizen;
import com.isartdigital.builder.game.sprites.Tile;
import com.isartdigital.builder.ui.CheatPanel;
import com.isartdigital.builder.ui.UIManager;
import com.isartdigital.utils.Config;
import com.isartdigital.utils.events.EventType;
import com.isartdigital.utils.events.MouseEventType;
import com.isartdigital.utils.facebook.Facebook;
import com.isartdigital.utils.game.Camera;
import com.isartdigital.utils.game.CollisionManager;
import com.isartdigital.utils.game.GameStage;
import com.isartdigital.utils.game.iso.IsoManager;
import com.isartdigital.utils.game.IStateMachine;
import com.isartdigital.utils.loader.GameLoader;
import com.isartdigital.utils.system.DeviceCapabilities;
import js.Browser;
import js.html.MouseEvent;
import pixi.core.math.Point;
import pixi.core.math.shapes.Rectangle;
import pixi.interaction.EventTarget;
import pixi.interaction.InteractionManager;

/**
 * Manager (Singleton) en charge de gérer le déroulement d'une partie
 * @author Mathieu ANTHOINE
 */
class GameManager
{
	
	/**
	 * instance unique de la classe GameManager
	 */
	private static var instance: GameManager;
	
	public var mousePosition:Point = new Point( -1, -1);
	
	public var screenRect:Rectangle;
	
	
	/**
	 * Retourne l'instance unique de la classe, et la crée si elle n'existait pas au préalable
	 * @return instance unique
	 */
	public static function getInstance (): GameManager {
		if (instance == null) instance = new GameManager();
		return instance;
	}
	
	private function new() {
		
	}
	
	private function refreshMouseCoordinates(pEvent:MouseEvent) {
		var position:Point = GameStage.getInstance().getGameContainer().toLocal(new Point(pEvent.layerX, pEvent.layerY));
		mousePosition.set(position.x, position.y);
	}
	
	public function start (): Void {
		// Focus de la camera 
		var lCamera:Camera = Camera.getInstance();
		
		GameStage.getInstance().getGameContainer().addChild(lCamera.cameraFocus);
		lCamera.setTarget(GameStage.getInstance().getGameContainer());
		lCamera.setFocus(lCamera.cameraFocus);
		
		// Event de souris mouseMove
		Browser.window.addEventListener(MouseEventType.MOUSE_MOVE, refreshMouseCoordinates);
		
		// Initialisation de l'isoManager
		IsoManager.init(Config.tileWidth, Config.tileHeight);
		
		// demande au Manager d'interface de se mettre en mode "jeu"
		UIManager.getInstance().startGame();
		
		// enregistre le GameManager en tant qu'écouteur de la gameloop principale
		Main.getInstance().on(EventType.GAME_LOOP, gameLoop);	
		
		// début de l'initialisation du jeu
		CheatPanel.getInstance().ingame();
		MapManager.getInstance().generateMap();
		
		//Centre la caméra
		Camera.getInstance().centerView();
		
		//Défini le screen rect
		screenRect = DeviceCapabilities.getScreenRect(GameStage.getInstance().getGameContainer());
		
		ClippingManager.getInstance().start();
		ClippingManager.getInstance().displayAllTileInView();
		
		var lCitizen:Citizen = new Citizen();
		GameStage.getInstance().getGameContainer().addChild(lCitizen);
		
		lCitizen.start();
	}
	
	/**
	 * boucle de jeu (répétée à la cadence du jeu en fps)
	 */
	public function gameLoop (pEvent:EventTarget): Void {
		screenRect = DeviceCapabilities.getScreenRect(GameStage.getInstance().getTilesContainer());
		// le renderer possède une propriété plugins qui contient une propriété interaction de type InteractionManager
		// les instances d'InteractionManager fournissent un certain nombre d'informations comme les coordonnées globales de la souris
		Camera.getInstance().move();
		
		ClippingManager.getInstance().clipObject();
		
		doActions(cast Building.list);
		
		//moveCitizen();
	}
	
	
	private function doActions (list:Array<IStateMachine>) {
		for (i in 0...list.length) list[i].doAction();
	}
	
	
	private function moveCitizen():Void {
		for (lCitizen in Citizen.list) {
			lCitizen.doAction();
		}
	}

	
	/**
	 * détruit l'instance unique et met sa référence interne à null
	 */
	public function destroy (): Void {
		Main.getInstance().off(EventType.GAME_LOOP,gameLoop);
		instance = null;
	}

}
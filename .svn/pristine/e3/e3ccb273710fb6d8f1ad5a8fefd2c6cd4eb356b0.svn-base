<?php
include_once('ApplicationController.class.php');

class BuildingsController extends ApplicationController
{
	public function __construct()
	{
		
	}

	public function index()
	{
		return 'index';
	}
	
	public function move($params)
	{
		//TO DO vérifier que le batiment peux être posé sur sa nouvelle position
	
		$userId = self::getUserIdByToken(addslashes($params['token']));
		if (!$userId) return Utils::formatErrorMessage(ERROR_BAD_TOKEN, "Bad token");
		
		$sql = "UPDATE building_users
				SET x = " . addslashes($params['x']) . ",
					y = " . addslashes($params['y']) . "
				WHERE user_id = " . $userId . "
					AND id = " . addslashes($params['id']);
					
		$result = $GLOBALS['app']['db']->exec($sql);
		
		$data = $result;
		
		return json_encode([
			'data' => $data,
			'error' => $error != '',
			'errorCode' => -1,
			'errorMessage' => $error
		]);
	}

	public function createMotel($params)
	{
		//TO DO : vérifier que le peux être acheté
		//TO DO : vérifier que le batiment peux être posé
		
		//TO DO : enlever les ressources qui corresponde au a l'achat
		
		$userId = self::getUserIdByToken(addslashes($params['token']));
		
		if (!$userId) return Utils::formatErrorMessage(ERROR_BAD_TOKEN, "Bad token");
		
		$color = "#FFFFFF"; //TO DO : passer en paraètre
								
		$request = $GLOBALS['app']['db']->prepare('INSERT INTO building_motel VALUES (NULL, ?)');
		$request->execute(array($color));
		
		$building_id = $GLOBALS['app']['db']->lastInsertId();

		$this->createBuilding($userId, "motel", $params, $building_id);
								
		return json_encode([
			'data' => $data,
			'error' => $error != '',
			'errorCode' => -1,
			'errorMessage' => $error
		]);
	}
	
	public function createTemple($params)
	{
		//TO DO : vérifier que le peux être acheté
		//TO DO : vérifier que le batiment peux être posé
		
		//TO DO : enlever les ressources qui corresponde au a l'achat
		
		$userId = self::getUserIdByToken(addslashes($params['token']));
		
		if (!$userId) return Utils::formatErrorMessage(ERROR_BAD_TOKEN, "Bad token");
		
		$pinataReady = date("Y-m-d H:i:s");
								
		$request = $GLOBALS['app']['db']->prepare('INSERT INTO building_temple VALUES (NULL, ?)');
		$request->execute(array($pinataReady));

		$building_id = $GLOBALS['app']['db']->lastInsertId();
		
		$this->createBuilding($userId, "temple", $params, $building_id);
								
		return json_encode([
			'data' => $data,
			'error' => $error != '',
			'errorCode' => -1,
			'errorMessage' => $error
		]);
	}
	
	public function createRocketFactory ($params)
	{
		//TO DO : vérifier que le peux être acheté
		//TO DO : vérifier que le batiment peux être posé
		
		//TO DO : enlever les ressources qui corresponde au a l'achat
		
		$userId = self::getUserIdByToken(addslashes($params['token']));
		
		if (!$userId) return Utils::formatErrorMessage(ERROR_BAD_TOKEN, "Bad token");
		
		$lvl = 1; //TO DO récupérer en paramètre
		
		$lvlMax = 2; //récupérer depuis .json
								
		$request = $GLOBALS['app']['db']->prepare('INSERT INTO building_rocket_factory VALUES (NULL, ?, ?)');
		$request->execute(array($lvl, $lvlMax));
		
		$building_id = $GLOBALS['app']['db']->lastInsertId();
		
		$this->createBuilding($userId, "rocket_factory", $params, $building_id);
								
		return json_encode([
			'data' => $data,
			'error' => $error != '',
			'errorCode' => -1,
			'errorMessage' => $error
		]);
	}

	public function destroy($params)
	{
		$sql = "SELECT id 
		FROM building_users
		WHERE x = '" . $params['x'] . "' AND y='" . $params['y'] . "'";
		
		$result = $GLOBALS['app']['db']->fetchAll($sql);
		//print_r($result);
		return 'ok';
	}
	
	private function createBuilding($userId, $buildingName, $params, $building_id)
	{
		$building_type_id = self::getBuildingTypeIdByName($buildingName);
		
		$date = date("Y-m-d H:i:s");
		//TO DO récupérer le temps que mets le batiment a être construit
		$construct_end = $date;
		
		$request = $GLOBALS['app']['db']->prepare('INSERT INTO building_users VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?)');
		$request->execute(array($userId, 
								$date, 
								$date, 
								$building_type_id, 
								$building_id, 
								addslashes($params['x']), 
								addslashes($params['y']), 
								$construct_end));
	}

	/*
	 * Récupère le type_id d'un building
	 * @param buildingName Nom du building (ex: temple)
	 */
	public static function getBuildingTypeIdByName($buildingName)
	{
		$sql = "SELECT id 
		FROM building_type
		WHERE building_name = '" . $buildingName . "'";
					
		$result = $GLOBALS['app']['db']->fetchAll($sql);
		return $result[0]['id'];
	}
}

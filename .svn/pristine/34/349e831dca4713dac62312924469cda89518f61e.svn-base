<?php
include_once('ApplicationController.class.php');
include_once('BuildingsController.class.php');

class ResourcesController extends ApplicationController
{
	public function __construct()
	{
		
	}
	
	public function index($params) {
		return $this->getResource($params);
	}
	
	public function gold($params) {
		return $this->getResource($params, 'gold');
	}
	
	public function offering($params) {
		return $this->getResource($params, 'offering');
	}
	
	public function spice($params) {
		return $this->getResource($params, 'spice');
	}
	
	public function getResource($params, $resourceName = '')
	{
		$userId = self::getUserIdByToken(addslashes($params['token']));
		
		if (!$userId) return Utils::formatErrorMessage(ERROR_BAD_TOKEN, "Bad token");		

		$data;
		$error = '';
		$sql = "SELECT r_t.name, r_u.count 
				FROM resource_users AS r_u 
				INNER JOIN resource_type AS r_t
				ON r_t.id = r_u.resource_type_id
				WHERE r_u.user_id = " . $userId;
				
		if ($resourceName != '') $sql .= " AND r_t.name = '" . $resourceName . "'";
		
		$result = $GLOBALS['app']['db']->fetchAll($sql);
		
		if (count($result) <= 0) $error = "Imposible de récupérer la ressource " . $resourceName . " pour le userId : " . $userId;
		else {
			for ($i = 0; $i < count($result); $i++) {
				if ($resourceName == '') $data[$result[$i]['name']] = $result[$i]['count'];
				else $data = $result[0]['count'];
			}
		}
		
		return json_encode([
			'data' => $data,
			'error' => $error != '',
			'errorCode' => -1,
			'errorMessage' => $error
		]);
	}


	/*
	 * Récupère le nombre total de buildings
	 * @param buildingName Nom du building
	 */
	private static function getBuildingCount($userId, $buildingName) {
		$buildingTypeId = BuildingsController::getBuildingTypeIdByName($buildingName);
		$table_name = "building_" . $buildingName;
		$sql = "SELECT count(*) FROM building_users WHERE user_id='" . $userId . "' AND building_type_id=" . $buildingTypeId . ";";
		$result = $GLOBALS['app']['db']->fetchAll($sql);
		echo $result[0]['count(*)'];
	}


	/*
	 * Permet d'update les ressources d'un joueur en fonction de ses bonus/batiments et de leur dernière update
	 * @param userId id de l'user pour update les resources
	 */
	public static function updateResource($userId) {
		// TO DO
		// ex : self::getBuildingCount($userId, 'temple');
	}
}

package com.isartdigital.utils.game;
import com.isartdigital.builder.game.def.TileSavedDef;
import com.isartdigital.builder.game.sprites.Building;
import com.isartdigital.builder.game.sprites.Tile;
import com.isartdigital.utils.game.factory.FlumpMovieAnimFactory;
import com.isartdigital.utils.game.iso.IsoManager;
import pixi.core.math.Point;

/**
 * ...
 * @author Flavien
 */
class PoolableObject extends StateGraphic implements IPoolableObject
{

	private static var MAX_TILES:Int = 100;
	private static var poolTiles:Array<Tile> = new Array<Tile>();
	
	public function new() 
	{
		super();
		factory = new FlumpMovieAnimFactory();
	}
	
	public function remove() : Void 
	{
		poolTiles.push(getInstance());
		removeFromList();
		parent.removeChild(this);
	}
	
	private function getInstance():Dynamic
	{
		return this;
	}
	
	/**
	 * remove l'objet de la list local
	 */
	private function removeFromList () : Void {}
	
	/**
	 * Vérifie si l'instance est bien créé
	 * @param	def
	 * @return
	 */
	private static function isCreate(def:TileSavedDef) : Bool {
		
		var lPosition:Point = IsoManager.modelToIsoView(new Point(def.x, def.y));
		
		for (lTile in Tile.list) {
			if (lTile.x == lPosition.x && lTile.y == lPosition.y) return true;
		}
		
		return false;
	}
	
	public static function add(def:TileSavedDef):Void {		
		if (isCreate(def)) return;

		if (poolTiles.length < 1) poolTiles.push(new Tile());
		
		var lTile:Tile = cast(poolTiles.shift(), Tile);
		
		var lPosition:Point = IsoManager.modelToIsoView(new Point(def.x, def.y));
		
		lTile.position.set(lPosition.x, lPosition.y);
		lTile.isBuildable = def.isBuildable;
		
		lTile.init(def.name);
	}
	
	private function init (?name:String) : Void {
		
	}
	
}